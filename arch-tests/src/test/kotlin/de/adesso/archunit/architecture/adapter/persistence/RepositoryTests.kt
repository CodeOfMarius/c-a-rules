package de.adesso.archunit.architecture.adapter.persistence

import com.tngtech.archunit.core.importer.ImportOption
import com.tngtech.archunit.junit.AnalyzeClasses
import com.tngtech.archunit.junit.ArchTest
import com.tngtech.archunit.lang.ArchRule
import com.tngtech.archunit.lang.syntax.ArchRuleDefinition.classes
import com.tngtech.archunit.lang.syntax.elements.GivenClassesConjunction
import de.adesso.archunit.architecture.util.beInternal
import org.springframework.data.jpa.repository.JpaRepository


@AnalyzeClasses(
    packages = ["de.adesso.archunit"],
    importOptions = [ImportOption.DoNotIncludeTests::class]
)
internal class RepositoryTests {

    private fun repositories(): GivenClassesConjunction {
        return classes()
            .that()
            .areTopLevelClasses()
            .and()
            .resideInAPackage("..repositories..")
    }

    @ArchTest
    var repositoryClassesExtendJpaRepository: ArchRule = repositories()
        .should()
        .beAssignableTo(JpaRepository::class.java)
        .because("Repositories are meant to connect to the database, therefore they must extend the JPARepository class!")
        .allowEmptyShould(true)

    @ArchTest
    var repositoryClassesHaveValidName: ArchRule = repositories()
        .should()
        .haveSimpleNameEndingWith("Repository")
        .because("Repositories should have the suffix Repository in the name to indicate that they are repositories!")
        .allowEmptyShould(true)

    @ArchTest
    var repositoryClassesOnlyEntities: ArchRule = repositories()
        .should()
        .onlyDependOnClassesThat()
        .resideInAnyPackage("..entities..", "java..", "org..", "kotlin..")
        .because("Repositories should only depend on db entities and the technical details necessary!")
        .allowEmptyShould(true)

    @ArchTest
    var repositoriesShouldBeInterfaces: ArchRule = repositories()
        .should()
        .beInterfaces()
        .because("Repositories must be interfaces, because the implementation is generated by spring!")
        .allowEmptyShould(true)

    @ArchTest
    var repositoriesShouldBeInternal: ArchRule = repositories()
        .should(beInternal())
        .because("Abstractions of use cases should be internal so that no other module may access them!")
        .allowEmptyShould(true)
}
